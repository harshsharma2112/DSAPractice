https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/


my 1st approach using RAW pointers

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.empty()) return 0;
        
        int *p1 = &nums[0];
        int *p2 = &nums[1];
        int * end = &nums[nums.size()-1];
        int counter = 1;

        while (p2 <= end){
            if (*p1 != *p2){
                *(++p1) = *p2;
                counter ++ ;
                
            }
            p2++;
        }
        return counter;

    }
};

//nums{1,1,2,3,3,5}
//relative order means ascending
// i while use while loop because i m not sure about lenght and i going to do the replace of value


2. approach indices
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.empty()) return 0;

        int i =0;
        int l = nums.size();

        for (int j =1 ; j<l ; j++){
            if(nums[j]!=nums[i]){
                i++;
                nums[i]=nums[j];
            }
        }
        return i+1;
    }
};



3. golang
func removeDuplicates(nums []int) int {
    if len(nums) == 0{
       return 0
    }   
    i:= 0

    for j:= 1 ; j<len(nums); j++{
        if nums[j] != nums[i]{
            i++
            nums[i]=nums[j]
        }
    }
    return i+1
    
}

unit

func TestRemoveDuplicate(t*testing.T){
    test := []struct{

        names string
        nums  []int
        value int
    }{
        {"empty string",[]int{},0},
        {" value string",[]int{1,2,3,4,4,4,5},5}
    }

    for _ value := range test{
        got := RemoveDuplicate(value.test)
        if got != expected{
             Errorof("%s: expected %v, got %v", tt.name, tt.expected, got)
        }
    }
}
